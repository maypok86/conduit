// Package port provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package port

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get recent articles globally
	// (GET /articles)
	GetArticles(w http.ResponseWriter, r *http.Request, params GetArticlesParams)
	// Create an article
	// (POST /articles)
	CreateArticle(w http.ResponseWriter, r *http.Request)
	// Get recent articles from users you follow
	// (GET /articles/feed)
	GetArticlesFeed(w http.ResponseWriter, r *http.Request, params GetArticlesFeedParams)
	// Delete an article
	// (DELETE /articles/{slug})
	DeleteArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Get an article
	// (GET /articles/{slug})
	GetArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Update an article
	// (PUT /articles/{slug})
	UpdateArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Get comments for an article
	// (GET /articles/{slug}/comments)
	GetArticleComments(w http.ResponseWriter, r *http.Request, slug string)
	// Create a comment for an article
	// (POST /articles/{slug}/comments)
	CreateArticleComment(w http.ResponseWriter, r *http.Request, slug string)
	// Delete a comment for an article
	// (DELETE /articles/{slug}/comments/{id})
	DeleteArticleComment(w http.ResponseWriter, r *http.Request, slug string, id int)
	// Unfavorite an article
	// (DELETE /articles/{slug}/favorite)
	DeleteArticleFavorite(w http.ResponseWriter, r *http.Request, slug string)
	// Favorite an article
	// (POST /articles/{slug}/favorite)
	CreateArticleFavorite(w http.ResponseWriter, r *http.Request, slug string)
	// Get a profile
	// (GET /profiles/{username})
	GetProfileByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Unfollow a user
	// (DELETE /profiles/{username}/follow)
	UnfollowUserByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Follow a user
	// (POST /profiles/{username}/follow)
	FollowUserByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Get tags
	// (GET /tags)
	GetTags(w http.ResponseWriter, r *http.Request)
	// Get current user
	// (GET /user)
	GetCurrentUser(w http.ResponseWriter, r *http.Request)
	// Update current user
	// (PUT /user)
	UpdateCurrentUser(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Existing user login
	// (POST /users/login)
	Login(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams

	// ------------- Optional query parameter "tag" -------------
	if paramValue := r.URL.Query().Get("tag"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------
	if paramValue := r.URL.Query().Get("author"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	// ------------- Optional query parameter "favorited" -------------
	if paramValue := r.URL.Query().Get("favorited"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "favorited", r.URL.Query(), &params.Favorited)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "favorited", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticles(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateArticle operation middleware
func (siw *ServerInterfaceWrapper) CreateArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticle(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetArticlesFeed operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesFeed(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesFeedParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticlesFeed(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteArticle operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameter("simple", false, "slug", chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticle(w, r, slug)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetArticle operation middleware
func (siw *ServerInterfaceWrapper) GetArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameter("simple", false, "slug", chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticle(w, r, slug)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateArticle operation middleware
func (siw *ServerInterfaceWrapper) UpdateArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameter("simple", false, "slug", chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateArticle(w, r, slug)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetArticleComments operation middleware
func (siw *ServerInterfaceWrapper) GetArticleComments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameter("simple", false, "slug", chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticleComments(w, r, slug)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateArticleComment operation middleware
func (siw *ServerInterfaceWrapper) CreateArticleComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameter("simple", false, "slug", chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticleComment(w, r, slug)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteArticleComment operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticleComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameter("simple", false, "slug", chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticleComment(w, r, slug, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteArticleFavorite operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticleFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameter("simple", false, "slug", chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticleFavorite(w, r, slug)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateArticleFavorite operation middleware
func (siw *ServerInterfaceWrapper) CreateArticleFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameter("simple", false, "slug", chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticleFavorite(w, r, slug)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProfileByUsername operation middleware
func (siw *ServerInterfaceWrapper) GetProfileByUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameter("simple", false, "username", chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProfileByUsername(w, r, username)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UnfollowUserByUsername operation middleware
func (siw *ServerInterfaceWrapper) UnfollowUserByUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameter("simple", false, "username", chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnfollowUserByUsername(w, r, username)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FollowUserByUsername operation middleware
func (siw *ServerInterfaceWrapper) FollowUserByUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameter("simple", false, "username", chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FollowUserByUsername(w, r, username)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTags(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCurrentUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles", wrapper.GetArticles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/articles", wrapper.CreateArticle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles/feed", wrapper.GetArticlesFeed)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/articles/{slug}", wrapper.DeleteArticle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles/{slug}", wrapper.GetArticle)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/articles/{slug}", wrapper.UpdateArticle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles/{slug}/comments", wrapper.GetArticleComments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/articles/{slug}/comments", wrapper.CreateArticleComment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/articles/{slug}/comments/{id}", wrapper.DeleteArticleComment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/articles/{slug}/favorite", wrapper.DeleteArticleFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/articles/{slug}/favorite", wrapper.CreateArticleFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profiles/{username}", wrapper.GetProfileByUsername)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/profiles/{username}/follow", wrapper.UnfollowUserByUsername)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/profiles/{username}/follow", wrapper.FollowUserByUsername)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.GetTags)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user", wrapper.GetCurrentUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user", wrapper.UpdateCurrentUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/login", wrapper.Login)
	})

	return r
}
